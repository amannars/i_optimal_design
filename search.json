[
  {
    "objectID": "20_response_surface_models.html",
    "href": "20_response_surface_models.html",
    "title": "Response Surface Models",
    "section": "",
    "text": "Response Surface Models\nResponse Surface Models (RSM) are used to predict the response of a system to different input variables. The RSM is a mathematical model that describes the relationship between the response and the input variables. The RSM is used to optimize the system by finding the input variables that will produce the desired response. The RSM is a useful tool for engineers and scientists who need to optimize a system with multiple input variables."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Preface",
    "section": "",
    "text": "Preface\nI-optimal Design of Experiments Using R\n\nPreface\nA Short Introduction to R\n\nR, R Studio, and user-written libraries\nData types\nReading and writing data\nOperations with vectors and matrices\nLogical operators\nBase R graphics\nSelected R libraries (plot3D, mix.DOE, and the optimization one)\n\nResponse Surface Models\n\nAmount models (Cartesian space)\nMixture models (Simplex space)\nMixture-amount models (Combined space)\nMixture-process models (Combined space)\nMixture-amount-process models (Combined space)\n\nConstructing I-optimal Designs\n\nPoint optimization\n\nWeighting matrix construction\nSpace matrix construction\nPoint selection and optimization\n\nPick-and-exchange algorithms\nDesign visualization using R\n\nExperiments in 2-D Cartesian Space\n\nUnconstrained spaces\nConstrained spaces\n\nExperiments in 3-D Cartesian Space\n\nUnconstrained spaces\nConstrained spaces\n\nExperiments in 4-D and Higher Cartesian Spaces\n\nUnconstrained spaces\nConstrained spaces\n\n3-Component Mixtures\n\nUnconstrained spaces\nConstrained spaces\n\n4-Component Mixtures\n\nUnconstrained spaces\nConstrained spaces\n\n5-Component and Higher Mixtures\n\nUnconstrained spaces\nConstrained spaces\n\nMixture Experiments in the Complete Simplex\n\n3-component mixtures\n4-component mixtures\n5- and higher component mixtures\n\nMixture Experiments in the Constrained Simplex\n\n3-component mixtures\n4-component mixtures\n5- and higher component mixtures \nDesign construction using R \n\nPoint optimization\nPick-and-exchange\n\nDesign visualization using R \n\nMixture-Amount Experiments\n\n3-component mixture-amount experiments\n4-component mixture-amount experiments\n5- and higher component mixture-amount experiments \nDesign construction using R \n\nPoint optimization\nPick-and-exchange\n\nDesign visualization using R\n\nConstrained Mixture-Amount Experiments\nMixture-Processing Experiments\nMixture-Amount-Processing Experiments\nDesigns using Non-linear Response Surface Models\n\nAppendix 1 – Design Visualization Using ggplot"
  },
  {
    "objectID": "05_preface.html",
    "href": "05_preface.html",
    "title": "Introduction to Design of Experiments and Optimal Design",
    "section": "",
    "text": "Design of Experiments (DOE) is a structured approach for planning experiments to efficiently explore the relationship between factors and responses. By strategically choosing experimental runs, DOE enables precise estimation of model parameters and reliable predictions. Optimal design theory extends DOE by selecting runs that maximize information or minimize variance according to a chosen criterion. This approach is crucial when experiments are costly or time-consuming, as it seeks to extract the most information from limited runs.\n\n\n\nOptimal designs are characterized by criteria like D-optimality, A-optimality, and I-optimality, each targeting a different aspect of estimation precision. I-optimality (also known as V-optimality) is especially relevant when the goal is accurate prediction across the design space. An I-optimal design minimizes the average prediction variance over the experimental region, which means it provides more uniform precision for predicted responses at all points in the design space.\n\n\n\n\n\n\n\n\nCriterion\nOptimization Goal\nFocus\n\n\n\n\nD-Optimality\nMaximizes det(X′X)\nOverall parameter estimate precision\n\n\nA-Optimality\nMinimizes trace((X′X)^(-1))\nAverage variance of parameter estimates\n\n\nI-Optimality\nMinimizes integrated variance of predictions\nPrediction accuracy across factor space\n\n\n\n\n\n\n\n\n\nR provides a rich ecosystem for DOE, including packages for classical designs and algorithmic optimal design. Packages like AlgDesign and skpr offer functions to generate D-, I-, and other optimal designs, evaluate their statistical properties, and visualize design efficiency.\n\n\n\nThe tidyverse set of packages integrates well with DOE tasks by simplifying data manipulation and visualization. In the context of optimal design, tidyverse tools can be used to:\n\nDefine candidate sets of experimental runs\nFilter or modify candidate points based on practical constraints\nExamine and visualize designs\n\nExample of creating a candidate set using tidyverse functions:\n\nlibrary(tidyverse)\n# Define candidate set for 2 factors (x1, x2 each in {-1,0,1})\n\ncandidate_set &lt;- expand.grid(x1 = c(-1, 0, 1), x2 = c(-1, 0, 1))\nprint(candidate_set)\n\nThis tibble of candidates can then be fed into optimal design algorithms in R. The tidyverse thus helps maintain clarity and efficiency in managing DOE data, which becomes increasingly important as the number of factors and candidate runs grows."
  },
  {
    "objectID": "05_preface.html#overview-of-design-of-experiments-doe-and-optimality",
    "href": "05_preface.html#overview-of-design-of-experiments-doe-and-optimality",
    "title": "Introduction to Design of Experiments and Optimal Design",
    "section": "",
    "text": "Design of Experiments (DOE) is a structured approach for planning experiments to efficiently explore the relationship between factors and responses. By strategically choosing experimental runs, DOE enables precise estimation of model parameters and reliable predictions. Optimal design theory extends DOE by selecting runs that maximize information or minimize variance according to a chosen criterion. This approach is crucial when experiments are costly or time-consuming, as it seeks to extract the most information from limited runs.\n\n\n\nOptimal designs are characterized by criteria like D-optimality, A-optimality, and I-optimality, each targeting a different aspect of estimation precision. I-optimality (also known as V-optimality) is especially relevant when the goal is accurate prediction across the design space. An I-optimal design minimizes the average prediction variance over the experimental region, which means it provides more uniform precision for predicted responses at all points in the design space.\n\n\n\n\n\n\n\n\nCriterion\nOptimization Goal\nFocus\n\n\n\n\nD-Optimality\nMaximizes det(X′X)\nOverall parameter estimate precision\n\n\nA-Optimality\nMinimizes trace((X′X)^(-1))\nAverage variance of parameter estimates\n\n\nI-Optimality\nMinimizes integrated variance of predictions\nPrediction accuracy across factor space"
  },
  {
    "objectID": "05_preface.html#setting-the-stage-doe-in-r-and-the-tidyverse",
    "href": "05_preface.html#setting-the-stage-doe-in-r-and-the-tidyverse",
    "title": "Introduction to Design of Experiments and Optimal Design",
    "section": "",
    "text": "R provides a rich ecosystem for DOE, including packages for classical designs and algorithmic optimal design. Packages like AlgDesign and skpr offer functions to generate D-, I-, and other optimal designs, evaluate their statistical properties, and visualize design efficiency.\n\n\n\nThe tidyverse set of packages integrates well with DOE tasks by simplifying data manipulation and visualization. In the context of optimal design, tidyverse tools can be used to:\n\nDefine candidate sets of experimental runs\nFilter or modify candidate points based on practical constraints\nExamine and visualize designs\n\nExample of creating a candidate set using tidyverse functions:\n\nlibrary(tidyverse)\n# Define candidate set for 2 factors (x1, x2 each in {-1,0,1})\n\ncandidate_set &lt;- expand.grid(x1 = c(-1, 0, 1), x2 = c(-1, 0, 1))\nprint(candidate_set)\n\nThis tibble of candidates can then be fed into optimal design algorithms in R. The tidyverse thus helps maintain clarity and efficiency in managing DOE data, which becomes increasingly important as the number of factors and candidate runs grows."
  },
  {
    "objectID": "10_intro_to_r.html",
    "href": "10_intro_to_r.html",
    "title": "A Short Introduction to R",
    "section": "",
    "text": "Definition of R: R is an open-source language and environment focused on statistical computing and graphics. It is well-suited for data manipulation, exploration, and advanced analytics, making it a natural choice for experimental design.\nInterpretation and Scripting: R can be used interactively at the console or through scripts, facilitating reproducible research.\nData Structures: R supports a variety of data structures, including vectors, matrices, data frames, and lists.\n\n\n\n\n\nOverview of RStudio: RStudio is an Integrated Development Environment (IDE) that simplifies coding in R. It provides a console, source editor, environment tab, and plots pane in one interface.\nProject-Based Workflow: Encourages best practices: keep project files, scripts, and data together. This is especially helpful for organizing experimental design projects.\n\n\n\n\n\nCRAN and Other Repositories: R packages are typically installed from CRAN. Some specialized packages may come from GitHub or other repositories.\nUser-Written Libraries: Researchers often share R libraries for custom functions. For instance, specialized DOE packages or domain-specific modeling tools.\nInstalling/Loading Packages: Use install.packages(\"&lt;pkgname&gt;\"), then library(&lt;pkgname&gt;) to load them. This makes functions available for use in your scripts.\n\n\n# Example: Installing and loading a package\n# Example: Installing and loading a package\ninstall.packages(\"AlgDesign\")  # from CRAN\nlibrary(AlgDesign)\n\n# Installing from GitHub requires the 'remotes' package:\n# install.packages(\"remotes\")\n# remotes::install_github(\"someUser/someRepo\")\n\n\n\n\n\n\n\n\nNumerical: Floating-point (e.g., 3.14) or integer (e.g., 1L). Often represent factor levels.\nCharacter: Strings used for labeling treatments or levels.\nLogical: Boolean values (TRUE/FALSE) for conditions and subsetting.\n\n\n\n\n\nVectors: One-dimensional collections of elements of the same type.\nMatrices: Two-dimensional collections of the same type, crucial for design matrices in modeling.\nLists: Ordered collections that can contain different data types (e.g., model objects).\nData Frames / Tibbles: Tabular data with named columns; in the tidyverse, tibbles (tbl_df) are the default.\n\n\nlibrary(tibble)\n\n# Creating a tibble\n\ndf &lt;- tibble( run_id = 1:5, factorA = c(-1, -1, 0, 1, 1), factorB = c(0, 1, -1, 0, 1), response = c(10.2, 12.1, 9.7, 15.4, 18.0) )\n\nprint(df)\nstr(df)\n\n# Changing the type of a column\n\ndf$response &lt;- as.integer(df$response) df\n\n\n\n\n\n\n\nReading Data:\n- Base R: read.csv(), read.table(), readRDS().\n- Tidyverse readr: readr::read_csv().\nWriting Data:\n- Base R: write.csv(), saveRDS().\n- Tidyverse readr: readr::write_csv().\n\n\n\nWorking Directory:\n- getwd() shows the current directory; setwd(\"path/to/dir\") sets it.\n- Use RStudio Projects for automatic path management.\nRelative vs. Absolute Paths:\n- file.path() constructs paths; here::here() is useful for project paths.\n- Helps keep projects organized and reproducible.\n\n# Reading a CSV file using readr\nlibrary(readr) design_data \\&lt;- read_csv(\"my_design_data.csv\")\n\n# Writing a CSV file\nwrite_csv(design_data, \"my_output.csv\")\n\n\n\n\n\n\n\n\nElement-wise Operations: +, -, *, / apply element by element.\n\nRecycling Rules: If vectors differ in length, the shorter one is recycled (be mindful of unintended consequences).\n\n\n\n\n\nCreation: matrix(data, nrow, ncol), rbind(), cbind().\n\nMultiplication: %*% for matrix multiplication (vital for computing X′XX′X in experimental design).\n\nTranspose/Inverse: t(M) and solve(M).\n\n\n# Vector operations\nx &lt;- 1:5 \ny &lt;- c(2, 4, 6, 8, 10)\n\nx + y # element-wise addition \nx * y # element-wise multiplication\n\n# Matrix operations\nA &lt;- matrix(1:4, nrow = 2, ncol = 2) \nB &lt;- matrix(c(2, 0, 0, 2), nrow = 2, ncol = 2)\n\nA %*% B # Matrix multiplication \nsolve(B) # Matrix inverse\n\n\n\n\n\n\n\n\nComparison Operators: &lt;, &gt;, &lt;=, &gt;=, ==, !=.\nLogical Operators: &, |, ! for AND, OR, NOT.\n\n\n\n\nOperations happen element-by-element. Use any() or all() to combine results.\n\n\n\n\nIn base R, [ ] or subset().\nIn the tidyverse, dplyr::filter() is frequently used.\n\n\n# Vector comparisons\nv &lt;- c(1, 3, 5, 2, 4)\nv &gt; 2\n\n# Subset selection with dplyr\nlibrary(dplyr) \nfiltered_data &lt;- df %&gt;% \n  filter(factorA &gt; 0 & response &gt;= 15) \nfiltered_data\n\n\n\n\n\n\n\n\nplot(): Quick scatterplots; set arguments like xlab, ylab, main.\nAdd Lines/Points: lines(), points(), abline(), etc.\n\n\n\n\n\nhist(): Frequency histograms.\nbarplot(): For categorical or factor-based data.\nboxplot(): Summaries of numeric data distributions.\n\n\n# Example base R plot\nplot(df$factorA, df$response, \n     xlab = \"Factor A Level\", \n     ylab = \"Response\", \n     main = \"Response vs. Factor A\") \nabline(h = mean(df$response), col = \"red\", lty = 2)\n\n\n\n\n\n\n\n\nPurpose: Functions like scatter3D(), surf3D(), and contour3D() for 3D visualization.\n\nUse Case: Plotting 3-factor response surfaces or 2-factor surfaces plus response dimension.\n\n\n# Demo: 3D surface plotting\n\nlibrary(plot3D) \nx &lt;- seq(-1, 1, 0.1) \ny &lt;- seq(-1, 1, 0.1) \ngrid &lt;- expand.grid(x = x, y = y)\n\n# Sample quadratic response\n\nz_vals &lt;- with(grid, 15 + 3*x - 2*y - x\\^2 - y\\^2 + 2*x*y) \nz_mat &lt;- matrix(z_vals, nrow = length(x), ncol = length(y))\n\npersp3D(x = x, y = y, z = z_mat, \n        xlab = \"X\", ylab = \"Y\", zlab = \"Response\")\n\n\n\n\n\nPurpose: Tools specialized for mixture designs (e.g., simplex-lattice, simplex-centroid).\n\nIntegration: Often used with candidate sets for mixture experiments in combination with other DOE packages.\n\n\n\n\n\nAlgDesign: Classic package with optFederov() for constructing D-, I-, or other optimal designs.\n\nskpr: Provides coordinate-exchange algorithms for D-, I-, A-, and G-optimal designs. Also includes evaluation functions and FDS plots.\n\nWorkflow:\n–Create a candidate set (possibly via tidyverse).\n–Run optimization function.\n–Evaluate and visualize the resulting design.\n\n\n# Minimal example using AlgDesign for an I-optimal design\n\nlibrary(AlgDesign) \ncandidate_set &lt;- data.frame( x1 = c(-1, -1, 0, 1, 1), \n                             x2 = c(0, 1, 0, 1, 0))\n\nopt_result &lt;- optFederov( frml = ~ x1 + x2 + I(x1^2) + I(x2^2) + x1:x2, \n                          data = candidate_set, \n                          nTrials = 5, \n                          criterion = \"I\" ) \nopt_result$design\nopt_result$I\n\nSummary & Transition\nIn this chapter, you learned the essential R concepts and tools that will underpin all subsequent chapters on I-optimal designs. You now have a foundation in:\n\nR basics (IDE, package management, data types, data I/O)\n\nData structures (vectors, matrices, tibbles)\n\nCore operations (vectorized arithmetic, matrix multiplication)\n\nGraphics (base plots, plus a glance at 3D visualizations)\n\nKey libraries (including plot3D, mix.DOE, and an optimization package for DOE)\n```"
  },
  {
    "objectID": "10_intro_to_r.html#r-rstudio-and-user-written-libraries",
    "href": "10_intro_to_r.html#r-rstudio-and-user-written-libraries",
    "title": "A Short Introduction to R",
    "section": "",
    "text": "Definition of R: R is an open-source language and environment focused on statistical computing and graphics. It is well-suited for data manipulation, exploration, and advanced analytics, making it a natural choice for experimental design.\nInterpretation and Scripting: R can be used interactively at the console or through scripts, facilitating reproducible research.\nData Structures: R supports a variety of data structures, including vectors, matrices, data frames, and lists.\n\n\n\n\n\nOverview of RStudio: RStudio is an Integrated Development Environment (IDE) that simplifies coding in R. It provides a console, source editor, environment tab, and plots pane in one interface.\nProject-Based Workflow: Encourages best practices: keep project files, scripts, and data together. This is especially helpful for organizing experimental design projects.\n\n\n\n\n\nCRAN and Other Repositories: R packages are typically installed from CRAN. Some specialized packages may come from GitHub or other repositories.\nUser-Written Libraries: Researchers often share R libraries for custom functions. For instance, specialized DOE packages or domain-specific modeling tools.\nInstalling/Loading Packages: Use install.packages(\"&lt;pkgname&gt;\"), then library(&lt;pkgname&gt;) to load them. This makes functions available for use in your scripts.\n\n\n# Example: Installing and loading a package\n# Example: Installing and loading a package\ninstall.packages(\"AlgDesign\")  # from CRAN\nlibrary(AlgDesign)\n\n# Installing from GitHub requires the 'remotes' package:\n# install.packages(\"remotes\")\n# remotes::install_github(\"someUser/someRepo\")"
  },
  {
    "objectID": "10_intro_to_r.html#data-types",
    "href": "10_intro_to_r.html#data-types",
    "title": "A Short Introduction to R",
    "section": "",
    "text": "Numerical: Floating-point (e.g., 3.14) or integer (e.g., 1L). Often represent factor levels.\nCharacter: Strings used for labeling treatments or levels.\nLogical: Boolean values (TRUE/FALSE) for conditions and subsetting.\n\n\n\n\n\nVectors: One-dimensional collections of elements of the same type.\nMatrices: Two-dimensional collections of the same type, crucial for design matrices in modeling.\nLists: Ordered collections that can contain different data types (e.g., model objects).\nData Frames / Tibbles: Tabular data with named columns; in the tidyverse, tibbles (tbl_df) are the default.\n\n\nlibrary(tibble)\n\n# Creating a tibble\n\ndf &lt;- tibble( run_id = 1:5, factorA = c(-1, -1, 0, 1, 1), factorB = c(0, 1, -1, 0, 1), response = c(10.2, 12.1, 9.7, 15.4, 18.0) )\n\nprint(df)\nstr(df)\n\n# Changing the type of a column\n\ndf$response &lt;- as.integer(df$response) df"
  },
  {
    "objectID": "10_intro_to_r.html#reading-and-writing-data",
    "href": "10_intro_to_r.html#reading-and-writing-data",
    "title": "A Short Introduction to R",
    "section": "",
    "text": "Reading Data:\n- Base R: read.csv(), read.table(), readRDS().\n- Tidyverse readr: readr::read_csv().\nWriting Data:\n- Base R: write.csv(), saveRDS().\n- Tidyverse readr: readr::write_csv().\n\n\n\nWorking Directory:\n- getwd() shows the current directory; setwd(\"path/to/dir\") sets it.\n- Use RStudio Projects for automatic path management.\nRelative vs. Absolute Paths:\n- file.path() constructs paths; here::here() is useful for project paths.\n- Helps keep projects organized and reproducible.\n\n# Reading a CSV file using readr\nlibrary(readr) design_data \\&lt;- read_csv(\"my_design_data.csv\")\n\n# Writing a CSV file\nwrite_csv(design_data, \"my_output.csv\")"
  },
  {
    "objectID": "10_intro_to_r.html#operations-with-vectors-and-matrices",
    "href": "10_intro_to_r.html#operations-with-vectors-and-matrices",
    "title": "A Short Introduction to R",
    "section": "",
    "text": "Element-wise Operations: +, -, *, / apply element by element.\n\nRecycling Rules: If vectors differ in length, the shorter one is recycled (be mindful of unintended consequences).\n\n\n\n\n\nCreation: matrix(data, nrow, ncol), rbind(), cbind().\n\nMultiplication: %*% for matrix multiplication (vital for computing X′XX′X in experimental design).\n\nTranspose/Inverse: t(M) and solve(M).\n\n\n# Vector operations\nx &lt;- 1:5 \ny &lt;- c(2, 4, 6, 8, 10)\n\nx + y # element-wise addition \nx * y # element-wise multiplication\n\n# Matrix operations\nA &lt;- matrix(1:4, nrow = 2, ncol = 2) \nB &lt;- matrix(c(2, 0, 0, 2), nrow = 2, ncol = 2)\n\nA %*% B # Matrix multiplication \nsolve(B) # Matrix inverse"
  },
  {
    "objectID": "10_intro_to_r.html#logical-operators",
    "href": "10_intro_to_r.html#logical-operators",
    "title": "A Short Introduction to R",
    "section": "",
    "text": "Comparison Operators: &lt;, &gt;, &lt;=, &gt;=, ==, !=.\nLogical Operators: &, |, ! for AND, OR, NOT.\n\n\n\n\nOperations happen element-by-element. Use any() or all() to combine results.\n\n\n\n\nIn base R, [ ] or subset().\nIn the tidyverse, dplyr::filter() is frequently used.\n\n\n# Vector comparisons\nv &lt;- c(1, 3, 5, 2, 4)\nv &gt; 2\n\n# Subset selection with dplyr\nlibrary(dplyr) \nfiltered_data &lt;- df %&gt;% \n  filter(factorA &gt; 0 & response &gt;= 15) \nfiltered_data"
  },
  {
    "objectID": "10_intro_to_r.html#base-r-graphics",
    "href": "10_intro_to_r.html#base-r-graphics",
    "title": "A Short Introduction to R",
    "section": "",
    "text": "plot(): Quick scatterplots; set arguments like xlab, ylab, main.\nAdd Lines/Points: lines(), points(), abline(), etc.\n\n\n\n\n\nhist(): Frequency histograms.\nbarplot(): For categorical or factor-based data.\nboxplot(): Summaries of numeric data distributions.\n\n\n# Example base R plot\nplot(df$factorA, df$response, \n     xlab = \"Factor A Level\", \n     ylab = \"Response\", \n     main = \"Response vs. Factor A\") \nabline(h = mean(df$response), col = \"red\", lty = 2)"
  },
  {
    "objectID": "10_intro_to_r.html#selected-r-libraries-plot3d-mix.doe-and-an-optimization-library",
    "href": "10_intro_to_r.html#selected-r-libraries-plot3d-mix.doe-and-an-optimization-library",
    "title": "A Short Introduction to R",
    "section": "",
    "text": "Purpose: Functions like scatter3D(), surf3D(), and contour3D() for 3D visualization.\n\nUse Case: Plotting 3-factor response surfaces or 2-factor surfaces plus response dimension.\n\n\n# Demo: 3D surface plotting\n\nlibrary(plot3D) \nx &lt;- seq(-1, 1, 0.1) \ny &lt;- seq(-1, 1, 0.1) \ngrid &lt;- expand.grid(x = x, y = y)\n\n# Sample quadratic response\n\nz_vals &lt;- with(grid, 15 + 3*x - 2*y - x\\^2 - y\\^2 + 2*x*y) \nz_mat &lt;- matrix(z_vals, nrow = length(x), ncol = length(y))\n\npersp3D(x = x, y = y, z = z_mat, \n        xlab = \"X\", ylab = \"Y\", zlab = \"Response\")\n\n\n\n\n\nPurpose: Tools specialized for mixture designs (e.g., simplex-lattice, simplex-centroid).\n\nIntegration: Often used with candidate sets for mixture experiments in combination with other DOE packages.\n\n\n\n\n\nAlgDesign: Classic package with optFederov() for constructing D-, I-, or other optimal designs.\n\nskpr: Provides coordinate-exchange algorithms for D-, I-, A-, and G-optimal designs. Also includes evaluation functions and FDS plots.\n\nWorkflow:\n–Create a candidate set (possibly via tidyverse).\n–Run optimization function.\n–Evaluate and visualize the resulting design.\n\n\n# Minimal example using AlgDesign for an I-optimal design\n\nlibrary(AlgDesign) \ncandidate_set &lt;- data.frame( x1 = c(-1, -1, 0, 1, 1), \n                             x2 = c(0, 1, 0, 1, 0))\n\nopt_result &lt;- optFederov( frml = ~ x1 + x2 + I(x1^2) + I(x2^2) + x1:x2, \n                          data = candidate_set, \n                          nTrials = 5, \n                          criterion = \"I\" ) \nopt_result$design\nopt_result$I\n\nSummary & Transition\nIn this chapter, you learned the essential R concepts and tools that will underpin all subsequent chapters on I-optimal designs. You now have a foundation in:\n\nR basics (IDE, package management, data types, data I/O)\n\nData structures (vectors, matrices, tibbles)\n\nCore operations (vectorized arithmetic, matrix multiplication)\n\nGraphics (base plots, plus a glance at 3D visualizations)\n\nKey libraries (including plot3D, mix.DOE, and an optimization package for DOE)\n```"
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "References"
  },
  {
    "objectID": "15_design_of_experiments.html",
    "href": "15_design_of_experiments.html",
    "title": "Foundations of Optimal Experimental Design",
    "section": "",
    "text": "In regression-based DOE, each run is associated with a vector of regressor values derived from the chosen model. Collecting these vectors for all runs forms the design matrix (commonly denoted X). For example, if we plan to fit a second-order (quadratic) model in two factors X1 and X2, the regressor for a run with factor levels (x1, x2) would be:\n\\(f(x1,x2) = [1, x1, x2, x1x2, x1^2, x2^2]\\)\nThis includes an intercept, linear terms, interaction, and quadratics. The design matrix X has one row per run and one column per model term. This matrix encapsulates how the experimental settings relate to model predictions.\nHaving a full-rank design matrix is essential: it ensures the model’s parameters can be estimated uniquely. The number of runs should be at least equal to (and preferably larger than) the number of parameters in the model. In R, one can easily construct a design matrix using model.matrix():\n\ndesign_runs &lt;- data.frame(x1 = c(-1,-1, 1, 1, 0, 0),\nx2 = c(-1, 1,-1, 1, 0, 0)) # example runs\nX &lt;- model.matrix(~ x1 + x2 + I(x1^2) + I(x2^2) + x1:x2, data = design_runs)\nhead(X)\n\n  (Intercept) x1 x2 I(x1^2) I(x2^2) x1:x2\n1           1 -1 -1       1       1     1\n2           1 -1  1       1       1    -1\n3           1  1 -1       1       1    -1\n4           1  1  1       1       1     1\n5           1  0  0       0       0     0\n6           1  0  0       0       0     0"
  },
  {
    "objectID": "15_design_of_experiments.html#design-matrix-models-and-information-matrix",
    "href": "15_design_of_experiments.html#design-matrix-models-and-information-matrix",
    "title": "Foundations of Optimal Experimental Design",
    "section": "",
    "text": "In regression-based DOE, each run is associated with a vector of regressor values derived from the chosen model. Collecting these vectors for all runs forms the design matrix (commonly denoted X). For example, if we plan to fit a second-order (quadratic) model in two factors X1 and X2, the regressor for a run with factor levels (x1, x2) would be:\n\\(f(x1,x2) = [1, x1, x2, x1x2, x1^2, x2^2]\\)\nThis includes an intercept, linear terms, interaction, and quadratics. The design matrix X has one row per run and one column per model term. This matrix encapsulates how the experimental settings relate to model predictions.\nHaving a full-rank design matrix is essential: it ensures the model’s parameters can be estimated uniquely. The number of runs should be at least equal to (and preferably larger than) the number of parameters in the model. In R, one can easily construct a design matrix using model.matrix():\n\ndesign_runs &lt;- data.frame(x1 = c(-1,-1, 1, 1, 0, 0),\nx2 = c(-1, 1,-1, 1, 0, 0)) # example runs\nX &lt;- model.matrix(~ x1 + x2 + I(x1^2) + I(x2^2) + x1:x2, data = design_runs)\nhead(X)\n\n  (Intercept) x1 x2 I(x1^2) I(x2^2) x1:x2\n1           1 -1 -1       1       1     1\n2           1 -1  1       1       1    -1\n3           1  1 -1       1       1    -1\n4           1  1  1       1       1     1\n5           1  0  0       0       0     0\n6           1  0  0       0       0     0"
  }
]